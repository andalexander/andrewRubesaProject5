{"version":3,"sources":["firebase.js","UserCard.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","database","ref","dbRefDatabase","UserCard","handleQuestionChange","event","userInputQuestion","target","value","props","sendUserQuestionToFirebaseProp","handleAnswerChange","userInputAnswer","sendUserAnswerToFirebaseProp","className","htmlFor","type","id","placeholder","onChange","this","currentUserQ","maxLength","currentUserA","onClick","pushUsersInputProp","Component","App","getRandomCard","randomCard","Math","floor","random","state","flashcard","length","setState","counter","sendUserQuestionToFirebase","userQuestionInput","userQuestion","sendUserAnswerToFirebase","userAnswerInput","userAnswer","handleClick","e","preventDefault","randomCardNumber","question","answer","currentQuestion","currentAnswer","addUserCardComponent","showUserCard","pushUsersInput","userQuesiton","errorMessage","update","hideIntroCardComponent","showIntroCard","on","response","flashcardArrayCopy","data","val","key","push","console","log","tabIndex","flashcardLength","ifUserHasError","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2145e5c7.chunk.js","sourcesContent":["// firebase.js\nimport firebase from \"firebase\";\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst config = {\n  apiKey: \"AIzaSyCXg8rPkO-zeDhBDF5yCSiDtN10n4mlkgg\",\n  authDomain: \"js-flashcard-app.firebaseapp.com\",\n  databaseURL: \"https://js-flashcard-app.firebaseio.com\",\n  projectId: \"js-flashcard-app\",\n  storageBucket: \"js-flashcard-app.appspot.com\",\n  messagingSenderId: \"845847141861\",\n  appId: \"1:845847141861:web:e13a76cc35d2a594bbe30c\"\n};\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\n\nconst dbRef = firebase.database().ref();\n\nexport const dbRefDatabase = firebase.database();\n\nexport default dbRef;\n","// firebase.js\nimport React, { Component } from \"react\";\nimport { dbRef } from \"./firebase\";\n\nclass UserCard extends Component {\n  // Taking the input from the user and saving it to userQuestion & userAnswer state via the prop.\n  handleQuestionChange = event => {\n    const userInputQuestion = event.target.value;\n    this.props.sendUserQuestionToFirebaseProp(userInputQuestion);\n  };\n\n  handleAnswerChange = event => {\n    const userInputAnswer = event.target.value;\n    this.props.sendUserAnswerToFirebaseProp(userInputAnswer);\n  };\n\n  //Render cycle. This is where I am creating the users inputs.\n  render() {\n    return (\n      <div>\n        <div className=\"inputFlex\">\n          <div className=\"userInputs\">\n            <p>Enter your custom card question:</p>\n            <label htmlFor=\"userQuestionInput\" className=\"visuallyHidden\">\n              Enter your custom flashcard question.\n            </label>\n            <input\n              type=\"text\"\n              id=\"userQuestionInput\"\n              className=\"userInput\"\n              placeholder=\"Enter a question\"\n              onChange={this.handleQuestionChange}\n              value={this.props.currentUserQ}\n              maxLength=\"100\"\n            />\n          </div>\n          <div className=\"userInputs\">\n            <p>Enter your custom card answer:</p>\n            <label htmlFor=\"userAnswerInput\" className=\"visuallyHidden\">\n              Enter your custom flashcard answer.\n            </label>\n            <input\n              type=\"text\"\n              id=\"userAnswerInput\"\n              className=\"userInput\"\n              placeholder=\"Enter the answer\"\n              onChange={this.handleAnswerChange}\n              value={this.props.currentUserA}\n              maxLength=\"100\"\n            />\n          </div>\n        </div>\n        <div className=\"submissionButton\">\n          <button\n            onClick={this.props.pushUsersInputProp}\n            className=\"userSubmission\"\n          >\n            Submit Card\n          </button>\n        </div>\n      </div>\n    ); //end of App RETURN\n  } //end of App RENDER\n} //end of class APP\n\nexport default UserCard;\n","import React, { Component } from \"react\";\nimport dbRef from \"./firebase\";\nimport { dbRefDatabase } from \"./firebase\";\nimport UserCard from \"./UserCard\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      flashcard: [],\n      counter: 0,\n      currentQuestion: \"\",\n      currentAnswer: \"\",\n      userQuestion: \"\",\n      userAnswer: \"\",\n      showUserCard: false,\n      showIntroCard: true,\n      errorMessage: false\n    };\n  }\n\n  //Pulling data from Firebase database and setting it to flashcard state.\n  componentDidMount() {\n    dbRef.on(\"value\", response => {\n      const flashcardArrayCopy = [];\n      const data = response.val();\n      for (let key in data) {\n        flashcardArrayCopy.push(data[key]);\n      }\n      this.setState({\n        flashcard: flashcardArrayCopy\n      });\n      console.log(this.state.flashcard);\n    });\n  }\n\n  //Randomizing function for generating random card.\n  getRandomCard = () => {\n    const randomCard = Math.floor(Math.random() * this.state.flashcard.length);\n    this.setState({\n      counter: randomCard\n    });\n  };\n\n  //Functions that allow UserCard component access to userQuestion & userAnswer states. These are being passed down as props to the <UserCard /> component.\n  sendUserQuestionToFirebase = userQuestionInput => {\n    this.setState({\n      userQuestion: userQuestionInput\n    });\n  };\n\n  sendUserAnswerToFirebase = userAnswerInput => {\n    this.setState({\n      userAnswer: userAnswerInput\n    });\n  };\n\n  //Function to generate random \"Card\" from Firebase database.\n  handleClick = e => {\n    e.preventDefault();\n    this.getRandomCard();\n    const randomCardNumber = this.state.counter;\n    const question = this.state.flashcard[randomCardNumber].question;\n    const answer = this.state.flashcard[randomCardNumber].answer;\n    this.setState({\n      currentQuestion: question,\n      currentAnswer: answer\n    });\n  };\n\n  //Function to change showUserCard to true so it appears in the \"userCustomCard\" div when the \"this.addUserCardComponent\" onClick fires.\n  addUserCardComponent = e => {\n    e.preventDefault();\n    this.setState({\n      showUserCard: true\n    });\n  };\n\n  //Function to push users custom card input values to Firebase.\n  pushUsersInput = e => {\n    e.preventDefault();\n    if (this.state.userQuesiton == \"\" || this.state.userAnswer == \"\") {\n      this.setState({\n        errorMessage: true\n      });\n    } else {\n      dbRefDatabase.ref(`card${this.state.flashcard.length + 1}`).update({\n        question: this.state.userQuestion,\n        answer: this.state.userAnswer\n      });\n      this.setState({\n        userQuestion: \"\",\n        userAnswer: \"\"\n      });\n    }\n  };\n\n  //Function to hide to set Intro message to false to hide for user.\n  hideIntroCardComponent = e => {\n    e.preventDefault();\n    this.setState({\n      showIntroCard: false\n    });\n  };\n\n  //Render cycle.\n  render() {\n    return (\n      <div className=\"flexParent wrapper\">\n        <main>\n          <h1 className=\"title\">flashCards.js</h1>\n          <div className=\"gameWindow\">\n            {this.state.showIntroCard ? (\n              <div className=\"introCard\">\n                <h1>Welcome to flashCards.js!</h1>\n                <p>\n                  flashCards.js is a JavaScript flashcard game designed to help\n                  you learn and remember JavaScript concepts.\n                </p>\n                <p>\n                  Click <span className=\"introSpan\">\"Next Card\"</span> to\n                  randomly generate a JS flashcard or click\n                  <span className=\"introSpan\"> \"Create your own\" </span> to add\n                  a custom flaschard to the database!\n                </p>\n                <button\n                  className=\"letsBegin\"\n                  onClick={this.hideIntroCardComponent}\n                >\n                  Let's begin!\n                </button>\n              </div>\n            ) : null}\n            <div className=\"flashcard\" tabIndex=\"0\">\n              <div className=\"flashcardInner\">\n                <div className=\"frontCard\">{this.state.currentQuestion}</div>\n                <div className=\"backCard\">{this.state.currentAnswer}</div>\n              </div>\n              {/* End of flashcardInner */}\n            </div>\n            {/* End of flashcard */}\n            <div className=\"userButtons\">\n              <button className=\"usersButtons\" onClick={this.handleClick}>\n                Next card\n              </button>\n              <button\n                className=\"usersButtons\"\n                onClick={this.addUserCardComponent}\n              >\n                Create your own\n              </button>\n            </div>\n            <div className=\"userCustomCard\">\n              {this.state.showUserCard ? (\n                <UserCard\n                  flashcardLength={this.state.flashcard.length}\n                  sendUserQuestionToFirebaseProp={\n                    this.sendUserQuestionToFirebase\n                  }\n                  sendUserAnswerToFirebaseProp={this.sendUserAnswerToFirebase}\n                  pushUsersInputProp={this.pushUsersInput}\n                  ifUserHasError={this.ifUserHasError}\n                  currentUserQ={this.state.userQuestion}\n                  currentUserA={this.state.userAnswer}\n                />\n              ) : null}\n            </div>\n            {this.state.errorMessage ? (\n              <span className=\"errorMessage\">\n                Please ensure both question and answer are filled!\n              </span>\n            ) : null}\n          </div>\n          {/* End of gameWindow */}\n        </main>\n      </div>\n    ); //end of App RETURN\n  } //end of App RENDER\n} //end of class APP\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}